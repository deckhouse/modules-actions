name: 'Trivy CVE Scan'
description: 'Build Deckhouse module'
inputs:
  tag:
    description: 'Module image tag'
    required: true
  module_name:
    description: 'Module name'
    required: true
  dd_url:
    description: 'URL to defectDojo'
    required: true
  dd_token:
    description: 'Token of defectDojo to upload reports'
    required: true
  prod_registry:
    description: 'Must be deckhouse prod registry, used to get trivy databases and release images'
    required: true
  prod_registry_user:
    description: 'Username to log in to deckhouse prod registry'
    required: true
  prod_registry_password:
    description: 'Password to log in to deckhouse prod registry'
    required: true
  dev_registry:
    description: 'Must be deckhouse dev registry, used to get dev images'
    required: true
  dev_registry_user:
    description: 'Username to log in to deckhouse dev registry'
    required: true
  dev_registry_password:
    description: 'Password to log in to deckhouse dev registry'
    required: true
  deckhouse_private_repo:
    description: 'URL to private repo to get Trivy from'
    required: true
  case:
    description: 'Case to scan'
    required: 
  scan_several_lastest_releases:
    description: 'true/false. Whether to scan last several releases or not. For scheduled pipelines override will not work as value is always true'
    required: false
  latest_releases_amount:
    description: 'Number of latest releases to scan. Default is: 3'
    required: false
  severity:
    description: 'Vulnerabilities severity to scan. Default is: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
    required: false
  module_prod_registry_custom_path:
    description: 'Module custom path in prod registry. Example: flant/modules'
    required: false
  module_dev_registry_custom_path:
    description: 'Module custom path in dev registry. Example: flant/modules'
    required: false

runs:
  using: "composite"
  steps:
    - name: Start ssh-agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
          ssh-private-key: |
            ${{ secrets.CVE_TESTS_SSH_PRIVATE_KEY }}
    - name: Add ssh_known_hosts
      run: |
        HOST=$(grep -oP '(?<=@)[^/:]+' <<< ${{ secrets.CVE_TESTS_REPO_GIT }})
        echo "::add-mask::$HOST"
        IPS=$(nslookup "$HOST" | awk '/^Address: / { print $2 }')
        for IP in $IPS; do
          echo "::add-mask::$IP"
        done
        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        HOST_KEYS=$(ssh-keyscan -H "$HOST" 2>/dev/null)
        while IFS= read -r KEY_LINE; do
          CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
          if ! grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
            echo "$KEY_LINE" >> ~/.ssh/known_hosts
          fi
        done <<< "$HOST_KEYS"

    - name: Download CVE scan script from private GitLab
      run: |
        echo "Cloning CVE scan script from private GitLab..."

        mkdir -p ${{ env.WORKDIR }}/scripts
        git clone ${{ secrets.CVE_TESTS_REPO_GIT }} ${{ env.WORKDIR }}/scripts
        chmod +x "${{ env.WORKDIR }}/scripts/cve_scan.sh"

        echo "CVE scan script cloned successfully"

    - name: Run Deckhouse images CVE tests on ${{env.TAG}}
      env:
        TAG: ${{inputs.tag}}
        SCAN_SEVERAL_LATEST_RELEASES: "${{ inputs.scan_several_lastest_releases }}"
        MODULE_NAME: "${{ inputs.module_name }}"
        DECKHOUSE_PRIVATE_REPO: ${{ inputs.deckhouse_private_repo }}
        DEV_REGISTRY: ${{ inputs.dev_registry }}
        DEV_REGISTRY_USER: ${{ inputs.dev_registry_user }}
        DEV_REGISTRY_PASSWORD: ${{ inputs.dev_registry_password }}
        PROD_REGISTRY: ${{ inputs.prod_registry }}
        PROD_REGISTRY_USER: ${{ inputs.prod_registry_user }}
        PROD_REGISTRY_PASSWORD: ${{ inputs.prod_registry_password }}
        CASE: "${{ inputs.case || 'external_modules' }}"
        DD_URL: ${{ inputs.dd_url }}
        DD_TOKEN: ${{ inputs.dd_token }}
        COMMIT_TAG: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        EVENT_NAME: ${{ github.event_name }}
        SEVERITY: "${{ inputs.severity }}"
      run: |
        echo "⚓️ 🏎 Running Deckhouse images CVE tests on ${TAG}..."
        ${{ env.WORKDIR }}/scripts/cve_scan.sh