name: 'Trivy CVE Scan'
description: 'Build Deckhouse module'
inputs:
  image:
    description: 'URL to a registry image, e.g., registry.example.com/deckhouse/modules/module_name'
    required: true
  tag:
    description: 'module image tag'
    required: true
  module_name:
    description: 'module name'
    required: true
  dd_url:
    description: 'URL to defectDojo'
    required: true
  dd_token:
    description: 'token of defectDojo to upload reports'
    required: true
  prod_registry:
    description: 'must be deckhouse prod registry, used to get trivy databases and release images'
    required: true
  prod_registry_user:
    description: 'username to log in to deckhouse prod registry'
    required: true
  prod_registry_password:
    description: 'password to log in to deckhouse prod registry'
    required: true
  dev_registry:
    description: ' must be deckhouse dev registry, used to get dev images'
    required: true
  dev_registry_user:
    description: 'username to log in to deckhouse dev registry'
    required: true
  dev_registry_password:
    description: 'password to log in to deckhouse dev registry'
    required: true
  deckhouse_private_repo:
    description: 'url to private repo'
    required: true
  scan_three_last_releases:
    description: 'whether to scan last 3 releases or not. useful for scheduled task'
    required: false

runs:
  using: "composite"
  steps:
    - name: Login to registries
      shell: bash
      run: |
        echo ${{inputs.prod_registry_password}} | docker login --username="${{inputs.prod_registry_user}}" --password-stdin ${{inputs.prod_registry}}
        echo ${{inputs.dev_registry_password}} | docker login --username="${{inputs.dev_registry_user}}" --password-stdin ${{inputs.dev_registry}}
    - name: Get Trivy
      shell: bash
      env:
        TRIVY_BIN_VERSION: "v0.58.1"
        TRIVY_REPO_ID: "2181"
        DECKHOUSE_PRIVATE_REPO: ${{inputs.deckhouse_private_repo}}
      run: |
        echo "Get Trivy"
        mkdir -p bin/trivy-${TRIVY_BIN_VERSION}
        curl -s --fail-with-body https://${DECKHOUSE_PRIVATE_REPO}/api/v4/projects/${TRIVY_REPO_ID}/packages/generic/trivy-${TRIVY_BIN_VERSION}/${TRIVY_BIN_VERSION}/trivy -o bin/trivy-${TRIVY_BIN_VERSION}/trivy
        chmod u+x bin/trivy-${TRIVY_BIN_VERSION}/trivy
        echo "${PWD}/bin/trivy-${TRIVY_BIN_VERSION}" >> $GITHUB_PATH
        bin/trivy-${TRIVY_BIN_VERSION}/trivy clean --all
    - name: Run Trivy CVE Scan
      shell: bash
      env:
        SEVERITY: "HIGH,CRITICAL"
        IMAGES_DIGESTS_PATH: "/images_digests.json"
        IMAGE: "${{inputs.image}}"
        TAG: "${{inputs.tag}}"
        MODULE_NAME: "${{inputs.module_name}}"
        DD_URL: "${{inputs.dd_url}}"
        DD_TOKEN: "${{inputs.dd_token}}"
        PROD_REGISTRY_MODULE_BASEDIR: "${{inputs.prod_registry}}/deckhouse/fe/modules"
        DEV_REGISTRY_MODULE_BASEDIR: "${{inputs.dev_registry}}/sys/deckhouse-oss/modules"
        TRIVY_DB_URL: "${{inputs.prod_registry}}/deckhouse/ee/security/trivy-db:2"
        TRIVY_JAVA_DB_URL: "${{inputs.prod_registry}}/deckhouse/ee/security/trivy-java-db:1"
        TRIVY_POLICY_URL: "${{inputs.prod_registry}}/deckhouse/ee/security/trivy-bdu:1"
      run: |
        #UNKNOWN,LOW,MEDIUM,
        # Do not use input var TAG if not merge request
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          module_tags=("${TAG}")
        else
          module_tags=(${{ github.event.repository.default_branch }})
        fi

        echo "Getting tags to scan"
        if [ "${{ inputs.scan_three_last_releases }}" == "true" ]; then
          # Get release tags by regexp, sort by sevmer desc, cut to get minor version, uniq and get 3 latest
          latest_minor_releases=($(crane ls "${PROD_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}" | grep "v[0-9]*\." | sort -V -r | cut -d "-" -f 1|cut -d "." -f -2 | uniq| head -n 3))
          for r in ${latest_minor_releases[*]}; do
            module_tags+=($(crane ls "${PROD_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}" | grep "${r}" | sort -V -r|head -n 1))
          done
        fi

        echo "CVE Scan will be applied to the following tags of ${MODULE_NAME}"
        echo "${module_tags[*]}"
        # Scan in loop for provided list of tags
        for module_tag in ${module_tags[*]}; do
          # If we are scanning release images - we need to redefine image path to prod registry
          if [ "${module_tag}" == "${TAG}" ]; then
            module_image="${IMAGE}"
          # if branch is main and pipeline was triggereg by schedule or manually - use dev registry
          elif [[ "${module_tag}" == "${{ github.event.repository.default_branch }}" ]] && [[ "${{ github.event_name }}" != "pull_request" ]]; then
            module_image="${DEV_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}"
          else
            module_image="${PROD_REGISTRY_MODULE_BASEDIR}/${MODULE_NAME}"
          fi
          workdir="trivy_scan"
          module_workdir="${workdir}/${MODULE_NAME}_${module_tag}"
          module_reports="${workdir}/${MODULE_NAME}_${module_tag}/reports"
          mkdir -p "${module_workdir}"
          mkdir -p "${module_reports}"
          echo "Run Trivy scan"
          echo "Image to check: "${module_image}:${module_tag}"
          echo "Severity: $SEVERITY"
          echo "----------------------------------------------"
          echo ""
          echo "Getting module image"
          crane export "${module_image}:${module_tag}" "${MODULE_NAME}.tar"
          mkdir "$MODULE_NAME"
          tar xf "${MODULE_NAME}.tar" -C "${module_workdir}/"
          echo "Preparing images list to scan"
          digests=$(cat "${module_workdir}${IMAGES_DIGESTS_PATH}")
          # Main module images to scan
          digests=$(echo "$digests"|jq --arg i "$MODULE_NAME" --arg s "${module_tag}" '. += { ($i): ($s) }')
          echo "Images to scan:"
          echo "$digests"
          mkdir -p out/json
          touch ${module_workdir}/.trivyignore
          date_iso=$(date -I)
          while read -r line; do
            IMAGE_NAME=$(jq -rc '.key' <<< "${line}")
            if [[ "${IMAGE_NAME}" == "trivy" ]]; then
              continue
            fi
            # Set flag if additional image to use tag instead of hash
            additional_image_detected=false
            if [ "${IMAGE_NAME}" == "${MODULE_NAME}" ]; then
              additional_image_detected=true
            fi
            echo "----------------------------------------------"
            echo "ðŸ‘¾ Image: ${IMAGE_NAME}"
            echo ""
            IMAGE_HASH="$(jq -rc '.value' <<< "$line")"
            IMAGE_REPORT_NAME="${MODULE_NAME}::${IMAGE_NAME}"
            # Output reports per images
            echo "    Scanning $IMAGE_REPORT_NAME"
            if [ "$additional_image_detected" == true ]; then
              trivy i --policy "$TRIVY_POLICY_URL" --java-db-repository "$TRIVY_JAVA_DB_URL" --db-repository "$TRIVY_DB_URL" --exit-code 0 --severity "$SEVERITY" --ignorefile "${module_workdir}/.trivyignore" --format table --scanners vuln --quiet "${IMAGE_NAME}:${module_tag}"
              trivy i --policy "$TRIVY_POLICY_URL" --java-db-repository "$TRIVY_JAVA_DB_URL" --db-repository "$TRIVY_DB_URL" --exit-code 0 --severity "$SEVERITY" --ignorefile "${module_workdir}/.trivyignore" --format json --scanners vuln --output "${module_reports}/d8_${MODULE_NAME}_${IMAGE_NAME}_report.json" --quiet "${IMAGE_NAME}:${module_tag}"
            else
              trivy i --policy "$TRIVY_POLICY_URL" --java-db-repository "$TRIVY_JAVA_DB_URL" --db-repository "$TRIVY_DB_URL" --exit-code 0 --severity "$SEVERITY" --ignorefile "${module_workdir}/.trivyignore" --format table --scanners vuln --quiet "${IMAGE_NAME}@${IMAGE_HASH}"
              trivy i --policy "$TRIVY_POLICY_URL" --java-db-repository "$TRIVY_JAVA_DB_URL" --db-repository "$TRIVY_DB_URL" --exit-code 0 --severity "$SEVERITY" --ignorefile "${module_workdir}/.trivyignore" --format json --scanners vuln --output "${module_reports}/d8_${MODULE_NAME}_${IMAGE_NAME}_report.json" --quiet "${IMAGE_NAME}@${IMAGE_HASH}"
            fi
            echo "    Done"
            echo ""
            echo " Uploading trivy CVE report for image ${IMAGE_NAME} of ${MODULE_NAME} module"
            echo ""
            curl -s -X POST \
              ${DD_URL}/api/v2/reimport-scan/ \
              -H "accept: application/json" \
              -H "Content-Type: multipart/form-data"  \
              -H "Authorization: Token ${DD_TOKEN}" \
              -F "auto_create_context=True" \
              -F "minimum_severity=Info" \
              -F "active=true" \
              -F "verified=true" \
              -F "scan_type=Trivy Scan" \
              -F "close_old_findings=true" \
              -F "do_not_reactivate=false" \
              -F "push_to_jira=false" \
              -F "file=@out/json/d8_${MODULE_NAME}_${IMAGE_NAME}_report.json" \
              -F "product_type_name=Deckhouse images" \
              -F "product_name=$MODULE_NAME" \
              -F "scan_date=${date_iso}" \
              -F "engagement_name=CVE Test: ${MODULE_NAME} Images" \
              -F "service=${MODULE_NAME} / ${IMAGE_NAME}" \
              -F "group_by=component_name+component_version" \
              -F "deduplication_on_engagement=false" \
              -F "tags=deckhouse_module,module:${MODULE_NAME},image:${IMAGE_NAME},branch:${module_tag}" \
              -F "test_title=[${MODULE_NAME}]: ${IMAGE_NAME}:${module_tag}" \
              -F "version=${module_tag}" \
              -F "build_id=${IMAGE_HASH}" \
              -F "commit_hash=${CI_COMMIT_SHA}" \
              -F "branch_tag=${module_tag}" \
              -F "apply_tags_to_findings=true" \
            > /dev/null
          done < <(jq -rc 'to_entries[]' <<< "${digests}")
        done
        rm -r ${workdir}
