name: 'Build Deckhouse Module'
description: 'Build Deckhouse module'
inputs:
  module_source:
    description: 'Registry repository address for of the module, e.g., registry.example.com/module-source'
    required: true
  module_name:
    description: 'Name of the module, e.g., my-module'
    required: true
  module_tag:
    description: 'The version of the module to deploy to release channel, e.g., v1.21.1'
    required: true
  svace_enabled:
    description: 'A boolean value which indicates whether svace analyze will be performed'
    required: false
  svace_analyze_host:
    description: 'fqdn address to the svace analyze vm'
    required: false
  svace_analyze_ssh_user:
    description: 'ssh user to connect with to svace analyze vm'
    required: false
  svace_analyze_ssh_private_key:
    description: 'svace analyze server ssh private key secret'
    required: false

runs:
  using: "composite"
  steps:
    - name: Start ssh-agent
      if: ${{ github.event.inputs.svace_enabled == 'true' }}
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: "${{ inputs.svace_analyze_ssh_private_key }}"

    - name: Fill in ssh_known_hosts
      if: ${{ github.event.inputs.svace_enabled == 'true' }}
      shell: bash
      run: |
        host=${{ inputs.svace_analyze_host }}

        host_ip=$(nslookup "$host" | awk '/^Address: / { print $2 }')
        echo "::add-mask::$host_ip"

        mkdir -p ~/.ssh
        touch ~/.ssh/known_hosts
        HOST_KEYS=$(ssh-keyscan -H "$host" 2>/dev/null)
        while IFS= read -r KEY_LINE; do
            CONSTANT_PART=$(awk '{print $2, $3}' <<< "$KEY_LINE")
            if grep -q "$CONSTANT_PART" ~/.ssh/known_hosts; then
                ssh-keygen -R $host
                ssh-keygen -R $host_ip
            fi
            echo "$KEY_LINE" >> ~/.ssh/known_hosts
        done <<< "$HOST_KEYS"            

    - name: Build dependency images
      shell: bash
      run: |
        source "$(werf ci-env github --as-file)"
        werf build --repo=${{ inputs.module_source }}/${{ inputs.module_name }} --save-build-report --build-report-path images_tags_werf.json
      env:
        MODULES_MODULE_TAG: ${{ inputs.module_tag }}
        SVACE_ANALYZE_HOST: "${{ inputs.svace_analyze_host }}"
        SVACE_ANALYZE_SSH_USER: "${{ inputs.svace_analyze_ssh_user }}"
        SVACE_ENABLED: "${{ inputs.svace_enabled }}"    

    - name: Bundle the module image
      shell: bash
      run: |
        IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"
        IMAGE_DST="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json):${{ inputs.module_tag }}"
        echo "✨ Bundle image : Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
        crane copy ${IMAGE_SRC} ${IMAGE_DST}

    - name: Prepare the release-channel image
      shell: bash
      run: |
        IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
        IMAGE_DST="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)/release:${{ inputs.module_tag }}"
        echo "✨ Release-channel image : Pushing ${IMAGE_SRC} to ${IMAGE_DST}"
        crane copy ${IMAGE_SRC} ${IMAGE_DST}

    - name: Register ${{ inputs.module_name }} module
      shell: bash
      run: |
        echo "✨ Register the module ${{ inputs.module_name }}"
        crane append \
          --oci-empty-base \
          --new_layer "" \
          --new_tag "${{ inputs.module_source }}:${{ inputs.module_name }}"
