name: "Gitleaks scan"
description: "Run Gitleaks in full or diff mode (composite action)"

inputs:
  gitleaks_version:
    description: "Gitleaks tag to install (e.g. v8.28.0)"
    required: false
    default: "v8.28.0"
  scan_mode:
    description: "Scan mode: full | diff"
    required: false
    default: "full"
  config_path:
    description: "Path to .gitleaks.toml (leave empty for default rules)"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Gitleaks ${{ inputs.gitleaks_version }}
      shell: bash
      run: |
        set -euo pipefail
        ver="${{ inputs.gitleaks_version }}"
        file_ver="${ver#v}"

        arch="$(uname -m)"
        case "$arch" in
          x86_64|amd64)  pkg_arch="linux_x64" ;;
          aarch64|arm64) pkg_arch="linux_arm64" ;;
          *) echo "Unsupported arch: $arch"; exit 1 ;;
        esac

        url="https://github.com/gitleaks/gitleaks/releases/download/${ver}/gitleaks_${file_ver}_${pkg_arch}.tar.gz"
        echo "Downloading: $url"
        curl -sSL "$url" -o gitleaks.tgz
        tar -xzf gitleaks.tgz gitleaks
        chmod +x gitleaks

        install_dir="$HOME/.local/bin"
        mkdir -p "$install_dir"
        mv gitleaks "$install_dir/gitleaks"

        echo "$install_dir" >> "$GITHUB_PATH"

        "$install_dir/gitleaks" version

    - name: Sanity check PATH (should find gitleaks)
      shell: bash
      run: |
        set -euo pipefail
        command -v gitleaks
        gitleaks version

    - name: Compute base SHA (diff mode on PR)
      id: base
      if: ${{ inputs.scan_mode == 'diff' && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        set -euo pipefail
        git fetch origin "${GITHUB_BASE_REF}:${GITHUB_BASE_REF}" --depth=0 || true
        BASE_SHA=$(git merge-base HEAD "origin/${GITHUB_BASE_REF}")
        echo "base_sha=$BASE_SHA" >> "$GITHUB_OUTPUT"

    - name: Gitleaks detect (full)
      if: ${{ inputs.scan_mode == 'full' }}
      shell: bash
      run: |
        set -euo pipefail
        extra=()
        [[ -n "${{ inputs.config_path }}" ]] && extra+=( -c "${{ inputs.config_path }}" )
        echo "▶ Running full scan..."
        gitleaks detect --no-banner --report-format json --report-path gitleaks.json --source . "${extra[@]}"

    - name: Gitleaks detect (diff PR)
      if: ${{ inputs.scan_mode == 'diff' && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        set -euo pipefail
        BASE_SHA="${{ steps.base.outputs.base_sha }}"
        if [[ -z "$BASE_SHA" ]]; then
          echo "Base SHA not found; falling back to full scan"
          exit 2
        fi
        extra=()
        [[ -n "${{ inputs.config_path }}" ]] && extra+=( -c "${{ inputs.config_path }}" )
        echo "▶ Running diff scan $BASE_SHA...HEAD"
        gitleaks detect --no-banner --report-format json --report-path gitleaks.json \
          --source . --log-opts "$BASE_SHA...HEAD" "${extra[@]}"

    - name: Upload report (always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks.json
        if-no-files-found: ignore