name: "Gitleaks scan"
description: "Run Gitleaks in full or diff mode (composite action, pull_request_target compatible)"

inputs:
  scan_mode:
    description: "Scan mode: full | diff"
    required: false
    default: "full"
  gitleaks_version:
    description: "Gitleaks version to install"
    required: false
    default: "v8.28.0"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      if: ${{ inputs.scan_mode == 'full' }}
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Checkout PR merge commit
      uses: actions/checkout@v4
      if: ${{ inputs.scan_mode == 'diff' }}
      with:
        ref: refs/pull/${{ github.event.number }}/merge
        fetch-depth: 0
        persist-credentials: false

    - name: Install Gitleaks
      shell: bash
      run: |
        set -euo pipefail
        ver="${{ inputs.gitleaks_version }}"
        file_ver="${ver#v}"
        arch="$(uname -m)"
        case "$arch" in
          x86_64|amd64)  pkg_arch="linux_x64" ;;
          aarch64|arm64) pkg_arch="linux_arm64" ;;
          *) echo "Unsupported arch: $arch"; exit 1 ;;
        esac
        base="https://github.com/gitleaks/gitleaks/releases/download/${ver}"
        tgz="gitleaks_${file_ver}_${pkg_arch}.tar.gz"
        curl -sSL "$base/$tgz" -o gitleaks.tgz
        tar -xzf gitleaks.tgz gitleaks
        chmod +x gitleaks
        install_dir="$HOME/.local/bin"; mkdir -p "$install_dir"
        mv gitleaks "$install_dir/gitleaks"
        echo "$install_dir" >> "$GITHUB_PATH"
        gitleaks version

    - name: Check for optional config
      id: config
      shell: bash
      run: |
        set -euo pipefail
        if [[ -f "gitleaks.toml" ]]; then
          echo "config_arg=-c gitleaks.toml" >> "$GITHUB_OUTPUT"
          echo "✅ Found config: gitleaks.toml"
        else
          echo "config_arg=" >> "$GITHUB_OUTPUT"
          echo "⚠️ Config file not found. Proceeding with default rules."
        fi

    - name: Gitleaks scan (full)
      if: ${{ inputs.scan_mode == 'full' }}
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_ARG="${{ steps.config.outputs.config_arg }}"
        gitleaks detect --no-banner --redact \
          --report-format json --report-path gitleaks.json \
          $CONFIG_ARG \
          --source .

    - name: Gitleaks scan (diff)
      if: ${{ inputs.scan_mode == 'diff' }}
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_ARG="${{ steps.config.outputs.config_arg }}"
        
        BASE_COMMIT=$(git rev-parse HEAD^1)
        echo "Base commit: $BASE_COMMIT"
        echo "Scanning range: ${BASE_COMMIT}..HEAD"
        
        gitleaks detect --no-banner --redact \
          --report-format json --report-path gitleaks.json \
          --log-opts="${BASE_COMMIT}..HEAD" \
          $CONFIG_ARG \
          --source .

    - name: Print findings
      if: always()
      shell: bash
      env:
        REPO_URL: ${{ github.server_url }}/${{ github.repository }}
      run: |
        set -euo pipefail
        [[ -f gitleaks.json ]] || { echo "No gitleaks.json produced"; exit 0; }
        LIMIT=200

        JQ_FILTER='
          def norm:
            {
              file:   (.File // .file // .Target // .Location.File // ""),
              line:   (.StartLine // .Line // .Location.StartLine // 0),
              rule:   (.RuleID // .Rule // .Description // ""),
              commit: (.Commit // .commit // "")
            };
          (if type=="object" and has("findings") then .findings
           elif type=="array" then .
           else [] end)[] | norm
        '

        COUNT=$(jq -r 'if type=="object" and has("findings") then (.findings|length)
                       elif type=="array" then length else 0 end' gitleaks.json)
        echo "Findings: $COUNT"

        jq -r "$JQ_FILTER | [.rule, .file, (.line|tostring), (.commit // \"\")] | @tsv" gitleaks.json \
          | head -n "$LIMIT" \
          | while IFS=$'\t' read -r rule file line commit; do
              sha="${commit}"
              link=""
              if [[ -n "$sha" && -n "$file" && "$line" =~ ^[0-9]+$ ]]; then
                link="${REPO_URL}/blob/${sha}/${file}#L${line}"
              fi
              printf '• %s %s %s %s\n' "[$rule]" "${file}:${line}" "${sha:0:7}" "${link}"
            done

        {
          echo "### Secret findings :closed_lock_with_key:"
          echo
          echo "| Rule | File:Line | Commit | Link |"
          echo "|---|---|---|---|"
          jq -r "$JQ_FILTER | [.rule, .file, (.line|tostring), (.commit // \"\")] | @tsv" gitleaks.json \
            | head -n "$LIMIT" \
            | while IFS=$'\t' read -r rule file line commit; do
                sha="${commit}"
                link="-"
                if [[ -n "$sha" && -n "$file" && "$line" =~ ^[0-9]+$ ]]; then
                  link="${REPO_URL}/blob/${sha}/${file}#L${line}"
                fi
                printf '| `%s` | `%s:%s` | `%s` | %s |\n' "$rule" "$file" "$line" "${sha:0:7}" "$link"
              done

          if (( COUNT > LIMIT )); then
            MORE=$((COUNT - LIMIT))
            echo
            echo "_... and $MORE more (see artifact **gitleaks-report**)._"
          fi
        } >> "$GITHUB_STEP_SUMMARY"

        if (( COUNT > 0 )); then
          exit 1
        fi

    - name: Upload report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks.json
        if-no-files-found: ignore
